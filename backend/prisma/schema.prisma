// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Users table
model User{
  id  Int @id @default(autoincrement())
  name String @unique
  email String @unique
  password String?
  id_discord_linked Boolean @default(false)
  emailVerified DateTime?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  tokens Token[]
  accounts Account[]
  sessions Session[]
}

model Token {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId],references: [id])
  value String
  action String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSetting {
  id Int @id @default(autoincrement())
  userId Int @unique
  colortheme String
  timezone String

  //Relations
}

model Account {
  id                 String  @id @default(cuid())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at         Int?
  token_type        String?
  scope              String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

